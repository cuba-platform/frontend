import * as React from "react";
import {FormEvent} from "react";
import {Alert, Button, Card, Form, message} from "antd";
import {observer} from "mobx-react";
import {<%= className %>} from "./<%= className %>";
import {FormComponentProps} from "antd/lib/form";
import {Link, Redirect} from "react-router-dom";
import {IReactionDisposer, observable, reaction, toJS} from "mobx";
import {FormattedMessage, injectIntl, WrappedComponentProps} from 'react-intl';

import {
<% if (Object.keys(editAssociations).length > 0) { %>
  collection,
<% } %>
  instance, MainStoreInjected, injectMainStore
} from "@cuba-platform/react-core";

import {
<% if (editAttributes.length > 0) { %>
  Field,
<% } %>
  withLocalizedForm,
  extractServerValidationErrors,
  constructFieldsWithErrors,
  clearFieldErrors,
  MultilineText,
  Spinner
} from "@cuba-platform/react-ui";

import "<%= relDirShift %>app/App.css";

<% relationImports.forEach(relationImport =>{ -%>
  import {<%= relationImport.className %>} from "<%= relDirShift %><%= relationImport.path %>";
<% }) %>

type Props = FormComponentProps & EditorProps & MainStoreInjected;

type EditorProps = {
  entityId: string;
};

@injectMainStore
@observer
class <%= editComponentClass %>Component extends React.Component<Props & WrappedComponentProps> {

  dataInstance = instance<<%= entity.className %>>(<%= entity.className %>.NAME, {view: '<%= editView.name %>', loadImmediately: false});

  <% Object.entries(editAssociations).forEach(([attrName, entity]) => { %>
    <%= attrName %>sDc = collection<<%= entity.className %>>(<%= entity.className %>.NAME, {view: '_minimal'});
  <% }) %>

  @observable updated = false;
  reactionDisposer: IReactionDisposer;

  fields = [
  <% editAttributes.forEach(p => { -%>
    '<%= p.name %>',
  <% }) %>
  ];

  @observable globalErrors: string[] = [];

  handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    this.props.form.validateFields((err, values) => {
      if (err) {
        message.error(this.props.intl.formatMessage({id: 'management.editor.validationError'}));
        return;
      }
      this.dataInstance.update(this.props.form.getFieldsValue(this.fields))
        .then(() => {
          message.success(this.props.intl.formatMessage({id: 'management.editor.success'}));
          this.updated = true;
        })
        .catch((e: any) => {
          if (e.response && typeof e.response.json === "function") {
            e.response.json().then((response: any) => {
              clearFieldErrors(this.props.form);
              const { globalErrors, fieldErrors } = extractServerValidationErrors(response);
              this.globalErrors = globalErrors;
              if (fieldErrors.size > 0) {
                this.props.form.setFields(constructFieldsWithErrors(fieldErrors, this.props.form));
              }

              if (fieldErrors.size > 0 || globalErrors.length > 0) {
                message.error(this.props.intl.formatMessage({id: "management.editor.validationError"}));
              } else {
                message.error(this.props.intl.formatMessage({id: "management.editor.error"}));
              }
            });
          } else {
            message.error(
              this.props.intl.formatMessage({ id: "management.editor.error" })
            );
          }
        });
    });
  };

  render() {

    if (this.updated) {
      return <Redirect to={<%= className %>.PATH}/>
    }

    const {status} = this.dataInstance;
    const {mainStore} = this.props;
    if (mainStore == null || !mainStore.isEntityDataLoaded()) {
      return <Spinner/>;
    }

    return (
      <Card className='narrow-layout'>
        <Form onSubmit={this.handleSubmit}
              layout='vertical'>

          <% editAttributes.forEach(attr => { %>
            <Field entityName={<%= entity.className %>.NAME}
                   propertyName="<%= attr.name %>"
                   form={ this.props.form }
                   formItemOpts={ {style: {marginBottom: "12px"} } }


              <% if (Object.keys(editCompositions).includes(attr.name)) { %>
                   <% if (typeof nestedEntityInfo !== 'undefined' && typeof nestedEntityInfo[attr.name] !== 'undefined') {%>
                        nestedEntityView='<%= nestedEntityInfo[attr.name] %>'
                   <% } %>
                   parentEntityInstanceId={this.props.entityId !== <%= className %>.NEW_SUBPATH ? this.props.entityId : undefined}
              <% } %>

              <% if (Object.keys(editAssociations).includes(attr.name)) { %>
                   optionsContainer={this.<%= attr.name %>sDc}
              <% } %>

                   getFieldDecoratorOpts={{
            <% if (attr.mandatory) { %>
                   rules: [{required: true}],
              <% } %>
            <% if (attr.type && attr.type.fqn === 'java.lang.Boolean') { %>
                   valuePropName: "checked",
              <% } %>
                   }}
            /> <%# end Field %>
          <% }) %>


          {this.globalErrors.length > 0 && (
            <Alert
              message={<MultilineText lines={toJS(this.globalErrors)} />}
              type="error"
              style={{ marginBottom: "24px" }}
            />
          )}

          <Form.Item style={{textAlign: 'center'}}>
            <Link to={<%= className %>.PATH}>
              <Button htmlType="button">
                <FormattedMessage id='management.editor.cancel'/>
              </Button>
            </Link>
            <Button type="primary"
                    htmlType="submit"
                    disabled={status !== "DONE" && status !== "ERROR"}
                    loading={status === "LOADING"}
                    style={{marginLeft: '8px'}}>
              <FormattedMessage id='management.editor.submit'/>
            </Button>
          </Form.Item>
        </Form>
      </Card>
    );
  }

  componentDidMount() {
    if (this.props.entityId !== <%= className %>.NEW_SUBPATH) {
      this.dataInstance.load(this.props.entityId);
    } else {
      this.dataInstance.setItem(new <%= entity.className %>());
    }
    this.reactionDisposer = reaction(
      () => {
        return this.dataInstance.item
      },
      () => {
        this.props.form.setFieldsValue(this.dataInstance.getFieldValues(this.fields));
      }
    )
  }

  componentWillUnmount() {
    this.reactionDisposer();
  }

}

export default injectIntl(withLocalizedForm<EditorProps>({
  onValuesChange: (props: any, changedValues: any) => {
    // Reset server-side errors when field is edited
    Object.keys(changedValues).forEach((fieldName: string) => {
      props.form.setFields({
        [fieldName]: {
          value: changedValues[fieldName]
        }
      })
    });
  }
})(<%= editComponentClass %>Component));
