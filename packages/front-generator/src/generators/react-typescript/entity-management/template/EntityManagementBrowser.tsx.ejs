import * as React from "react";
import {observer} from "mobx-react";
import {Link} from "react-router-dom";
import { computed,
<% if (listType === 'table') { -%>
  observable
<% } %>
} from 'mobx';

import {Modal, Button,
<% if (listType === 'cards') { %>
  Card, Icon,
<% } else if (listType === 'list') { %>
  List, Icon,
<% } %>
} from "antd";

import {collection, injectMainStore, MainStoreInjected} from "@cuba-platform/react-core";
import {
<% if (listType === 'table') { %>
  DataTable,
<% } else { %>
  EntityProperty,
<% } %>
  Spinner
} from "@cuba-platform/react-ui";

import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";
import {SerializedEntity} from "@cuba-platform/rest";
import {<%= className %>} from "./<%= className %>";
import {FormattedMessage, injectIntl, WrappedComponentProps} from 'react-intl';

@injectMainStore
@observer
class <%= listComponentName %>Component extends React.Component<MainStoreInjected & WrappedComponentProps> {

  dataCollection = collection<<%= entity.className %>>(<%= entity.className %>.NAME, {view: '<%= listView.name %>', sort: '-updateTs'});

  fields = [
  <% listAttributes.forEach(p => { %>
    '<%= p.name %>',
  <% }) %>
  ];

  <% if (listType === 'table') { %>
    @observable selectedRowKey: string | undefined;
  <% } %>
  showDeletionDialog = (e: SerializedEntity<<%= entity.className %>>) => {
    Modal.confirm({
      title: this.props.intl.formatMessage(
        {id: 'management.browser.delete.areYouSure'},
        {instanceName: e._instanceName}
      ),
      okText: this.props.intl.formatMessage({id: 'management.browser.delete.ok'}),
      cancelText: this.props.intl.formatMessage({id:'management.browser.delete.cancel'}),
      onOk: () => {
      <% if (listType === 'table') { %>
        this.selectedRowKey = undefined;
      <% } %>
        return this.dataCollection.delete(e);
      }
    });
  };

  @computed private get dataLoaded() {
    const { mainStore } = this.props;
    return mainStore && !!mainStore.messages && !!mainStore.metadata && !!mainStore.enums && !!mainStore.security.permissions;
  }

  <% /* TABLE COMPONENT*/ %>
<% if (listType === 'table') { %>
  render() {

    if (!this.dataLoaded) return <Spinner/>;

    const buttons = (
      [
        (<Link to={<%= className %>.PATH + '/' + <%= className %>.NEW_SUBPATH} key='create'>
          <Button htmlType='button'
                  style={{margin: '0 12px 12px 0'}}
                  type='primary'
                  icon='plus'>
            <span><FormattedMessage id='management.browser.create'/></span>
          </Button>
        </Link>),
        (<Link to={<%= className %>.PATH + '/' + this.selectedRowKey} key='edit'>
          <Button htmlType='button'
                  style={{margin: '0 12px 12px 0'}}
                  disabled={!this.selectedRowKey}
                  type='default'>
            <FormattedMessage id='management.browser.edit'/>
          </Button>
        </Link>),
        (<Button htmlType='button'
                 style={{margin: '0 12px 12px 0'}}
                 disabled={!this.selectedRowKey}
                 onClick={this.deleteSelectedRow}
                 key='remove'
                 type='default'>
          <FormattedMessage id='management.browser.remove'/>
        </Button>),
      ]
    );

    return (
      <DataTable dataCollection={this.dataCollection}
                 fields={this.fields}
                 onRowSelectionChange={this.handleRowSelectionChange}
                 hideSelectionColumn={true}
                 buttons={buttons}
      />
    );
  }

  getRecordById(id: string): SerializedEntity<<%= entity.className %>> {
    const record: SerializedEntity<<%= entity.className %>> | undefined =
    this.dataCollection.items.find(record => record.id === id);

    if (!record) {
      throw new Error('Cannot find entity with id ' + id);
    }

    return record;
  }

  handleRowSelectionChange = (selectedRowKeys: string[]) => {
    this.selectedRowKey = selectedRowKeys[0];
  };

  deleteSelectedRow = () => {
    this.showDeletionDialog(this.getRecordById(this.selectedRowKey!));
  };

  <% /* CARD\LIST COMPONENT*/ %>
<% } else { %>
  render() {

    const {status, items} = this.dataCollection;
    if (status === "LOADING" || !this.dataLoaded) { return <Spinner/> };

    return (
      <div <% if (listType !== 'table') { %>className='narrow-layout'<% } %>>
        <div style={{marginBottom: '12px'}}>
          <Link to={<%= className %>.PATH + '/' + <%= className %>.NEW_SUBPATH}>
            <Button htmlType='button'
                    type='primary'
                    icon='plus'>
              <span><FormattedMessage id='management.browser.create'/></span>
            </Button>
          </Link>
        </div>

<%/* LIST */%>
    <% if (listType === 'list') { %>

        <List itemLayout="horizontal"
              bordered
              dataSource={items}
              renderItem={item =>
                <List.Item actions={[
                    <Icon type='delete'
                          key='delete'
                          onClick={() => this.showDeletionDialog(item)}/>,
                    <Link to={<%= className %>.PATH + '/' + item.id} key='edit'>
                      <Icon type='edit'/>
                    </Link>
                ]}>
                  <div style={{flexGrow: 1}}>
                  {this.fields.map(p =>
                    <EntityProperty entityName={<%= entity.className %>.NAME}
                                    propertyName={p}
                                    value={item[p]}
                                    key={p}/>
                  )}
                  </div>
                </List.Item>
            }/>

<%/* CARD */%>
    <% } else { %>
        {items == null || items.length === 0 ?
          <p><FormattedMessage id='management.browser.noItems'/></p> : null}
        {items.map(e =>
          <Card title={e._instanceName}
                key={e.id}
                style={{marginBottom: '12px'}}
                actions={[
                  <Icon type='delete'
                        key='delete'
                        onClick={() => this.showDeletionDialog(e)}/>,
                  <Link to={<%= className %>.PATH + '/' + e.id} key='edit'>
                    <Icon type='edit'/>
                  </Link>
                ]}>
                {this.fields.map(p =>
                  <EntityProperty entityName={<%= entity.className %>.NAME}
                                  propertyName={p}
                                  value={e[p]}
                                  key={p}/>
                )}
          </Card>
        )}
        <% } %>
      </div>
    )
  }
<% } %>
}

const <%=listComponentName%> = injectIntl(<%=listComponentName%>Component);

export default <%=listComponentName%>;
