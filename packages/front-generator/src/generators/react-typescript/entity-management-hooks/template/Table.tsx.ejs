import * as React from "react";
import { observer } from "mobx-react";
import { Link } from "react-router-dom";
import { observable } from 'mobx';
import { Modal, Button } from "antd";
import { PlusOutlined } from "@ant-design/icons";

import {collection, injectMainStore, MainStoreInjected} from "@cuba-platform/react-core";
import { DataTable, Spinner } from "@cuba-platform/react-ui";

import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";
import {SerializedEntity} from "@cuba-platform/rest";
import {<%= className %>} from "./<%= className %>";
import {FormattedMessage, injectIntl, WrappedComponentProps} from 'react-intl';

@injectMainStore
@observer
class <%= listComponentClass %>Component extends React.Component<MainStoreInjected & WrappedComponentProps> {

  dataCollection = collection<<%= entity.className %>>(<%= entity.className %>.NAME, {
      view: '<%= listView.name %>',
      <% if (entity.updatable == true) { -%>
        sort: '-updateTs',
      <% } %>
      <% if (locals.stringIdName != null) { %>
        stringIdName: '<%= stringIdName %>'
      <% } %>
    });
  @observable selectedRowKey: string | undefined;

  fields = [
  <% listAttributes.forEach(p => { -%>
    '<%= p.name %>',
  <% }) %>
  ];

  showDeletionDialog = (e: SerializedEntity<<%= entity.className %>>) => {
    Modal.confirm({
      title: this.props.intl.formatMessage(
        {id: 'management.browser.delete.areYouSure'},
        {instanceName: e._instanceName}
      ),
      okText: this.props.intl.formatMessage({id: 'management.browser.delete.ok'}),
      cancelText: this.props.intl.formatMessage({id:'common.cancel'}),
      onOk: () => {
        this.selectedRowKey = undefined;
        return this.dataCollection.delete(e);
      }
    });
  };

  render() {

    if (this.props.mainStore?.isEntityDataLoaded() !== true) return <Spinner/>;

    const buttons = (
      [
        (<Link to={<%= className %>.PATH + '/' + <%= className %>.NEW_SUBPATH} key='create'>
          <Button htmlType='button'
                  style={{margin: '0 12px 12px 0'}}
                  type='primary'
                  icon={<PlusOutlined />}>
            <span><FormattedMessage id='common.create'/></span>
          </Button>
        </Link>),
        (<Link to={<%= className %>.PATH + '/' + this.selectedRowKey} key='edit'>
          <Button htmlType='button'
                  style={{margin: '0 12px 12px 0'}}
                  disabled={!this.selectedRowKey}
                  type='default'>
            <FormattedMessage id='common.edit'/>
          </Button>
        </Link>),
        (<Button htmlType='button'
                 style={{margin: '0 12px 12px 0'}}
                 disabled={!this.selectedRowKey}
                 onClick={this.deleteSelectedRow}
                 key='remove'
                 type='default'>
          <FormattedMessage id='common.remove'/>
        </Button>),
      ]
    );

    return (
      <DataTable dataCollection={this.dataCollection}
                 fields={this.fields}
                 onRowSelectionChange={this.handleRowSelectionChange}
                 hideSelectionColumn={true}
                 buttons={buttons}
      />
    );
  }

  getRecordById(id: string): SerializedEntity<<%= entity.className %>> {
    const record: SerializedEntity<<%= entity.className %>> | undefined =
    this.dataCollection.items.find(record => record.id === id);

    if (!record) {
      throw new Error('Cannot find entity with id ' + id);
    }

    return record;
  }

  handleRowSelectionChange = (selectedRowKeys: string[]) => {
    this.selectedRowKey = selectedRowKeys[0];
  };

  deleteSelectedRow = () => {
    this.showDeletionDialog(this.getRecordById(this.selectedRowKey!));
  };

}

const <%=listComponentClass%> = injectIntl(<%=listComponentClass%>Component);

export default <%=listComponentClass%>;