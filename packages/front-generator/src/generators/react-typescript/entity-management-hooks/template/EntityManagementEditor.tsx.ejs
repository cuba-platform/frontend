import React, {useCallback, useEffect, RefObject} from "react";
import {Form, Alert, Button, Card, message} from "antd";
import {FormInstance} from "antd/es/form";
import useForm from "antd/lib/form/hooks/useForm";
import {useLocalStore, useObserver} from "mobx-react";
import {<%= className %>} from "./<%= className %>";
import {Link, Redirect} from "react-router-dom";
import {toJS} from "mobx";
import {FormattedMessage, useIntl} from 'react-intl';
import {defaultHandleFinish, createAntdFormValidationMessages} from '@cuba-platform/react-ui';
import {
<% if (Object.keys(editAssociations).length > 0) { %>
  loadAssociationOptions,
  DataCollectionStore,
<% } %>
  useInstance,
  MainStore,
  useMainStore,
  useReaction
} from "@cuba-platform/react-core";
import {
<% if (editAttributes.length > 0) { %>
  Field,
<% } %>
  MultilineText,
  Spinner
} from "@cuba-platform/react-ui";
import "<%= relDirShift %>app/App.css";
<% relationImports.forEach(relationImport =>{ -%>
  import {<%= relationImport.className %>} from "<%= relDirShift %><%= relationImport.path %>";
<% }) %>

type Props = {
  entityId: string;
};

type <%= editComponentClass %>AssociationOptions = {
  <% Object.entries(editAssociations).forEach(([attrName, nestedEntity]) => { -%>
    <%= attrName %>sDc?: DataCollectionStore<<%= nestedEntity.className %>>;
  <% }) %>
};

type <%= editComponentClass %>LocalStore = <%= editComponentClass %>AssociationOptions & {
  updated: boolean;
  globalErrors: string[];
  formRef: RefObject<FormInstance>;
};

const FIELDS = [
  <% editAttributes.forEach(p => { -%>
    '<%= p.name %>',
  <% }) %>
]

const isNewEntity = (entityId: string) => {
  return entityId === <%= className %>.NEW_SUBPATH;
};

const getAssociationOptions = (mainStore: MainStore): <%= editComponentClass %>AssociationOptions => {
  const { getAttributePermission } = mainStore.security;
  const associationOptions: <%= editComponentClass %>AssociationOptions = {};

  <% Object.entries(editAssociations).forEach(([attrName, nestedEntity]) => { %>
    associationOptions.<%= attrName %>sDc = loadAssociationOptions(
      <%= entity.className %>.NAME,
      '<%= attrName %>',
      <%= nestedEntity.className %>.NAME,
      getAttributePermission,
      { view: "_minimal" }
    );
  <% }) %>

  return associationOptions;
};

const <%= editComponentClass %> = (props: Props) => {
  const { entityId } = props;

  const intl = useIntl();
  const mainStore = useMainStore();
  const [form] = useForm();

  const dataInstance = useInstance<<%= entity.className %>>(<%= entity.className %>.NAME, {
    view: '<%= editView.name %>',
    loadImmediately: false,
    <% if (locals.stringIdName != null) { -%>
      stringIdName: '<%= stringIdName %>'
    <% } -%>
  });

  const store: <%= editComponentClass %>LocalStore = useLocalStore(() => ({
    // Association options
    <% Object.entries(editAssociations).forEach(([attrName, nestedEntity]) => { -%>
      <%= attrName %>sDc: undefined,
    <% }) %>
    // Other
    updated: false,
    globalErrors: [],
    formRef: React.createRef(),
  }));

  useEffect(
    () => {
      if (isNewEntity(entityId)) {
        dataInstance.current.setItem(new <%= entity.className %>());
      } else {
        dataInstance.current.load(entityId);
      }
    },
    [entityId, dataInstance]
  );

  // Create a reaction that displays request failed error message
  useReaction(
    () => dataInstance.current.status,
    () => {
      if (dataInstance.current.lastError != null && dataInstance.current.lastError !== "COMMIT_ERROR") {
        message.error(intl.formatMessage({ id: "common.requestFailed" }));
      }
    }
  );

  // Create a reaction that waits for permissions data to be loaded,
  // loads Association options and disposes itself
  useReaction(
    () => mainStore.security.isDataLoaded,
    (isDataLoaded, permsReaction) => {
      if (isDataLoaded === true) {
        // User permissions has been loaded.
        // We can now load association options.
        const associationOptions = getAssociationOptions(mainStore); // Calls REST API
        Object.assign(store, associationOptions);
        permsReaction.dispose();
      }
    },
    { fireImmediately: true }
  );

  // Create a reaction that sets the fields values based on dataInstance.current.item
  useReaction(
    () => [store.formRef.current, dataInstance.current.item],
    ([formInstance]) => {
      if (formInstance != null) {
        form.setFieldsValue(
          dataInstance.current.getFieldValues(FIELDS)
        );
      }
    },
    { fireImmediately: true }
  );

  const handleFinishFailed = useCallback(
    () => {
      message.error(
        intl.formatMessage({ id: "management.editor.validationError" })
      );
    },
    [intl]
  );

  const handleFinish = useCallback(
    (values: { [field: string]: any }) => {
      if (form != null) {
        defaultHandleFinish(
          values,
          dataInstance.current,
          intl,
          form,
          isNewEntity(entityId) ? "create" : "edit"
        ).then(({ success, globalErrors }) => {
          if (success) {
            store.updated = true;
          } else {
            store.globalErrors = globalErrors;
          }
        });
      }
    },
    [entityId, intl, form, store.globalErrors, store.updated, dataInstance]
  );

  return useObserver(() => {
    if (store.updated) {
      return <Redirect to={<%= className %>.PATH}/>;
    }

    if (!mainStore.isEntityDataLoaded()) {
      return <Spinner/>;
    }

    const {status, lastError, load} = dataInstance.current;

    // do not stop on "COMMIT_ERROR" - it could be bean validation, so we should show fields with errors
    if (status === "ERROR" && lastError === "LOAD_ERROR") {
      return (
        <>
          <FormattedMessage id="common.requestFailed"/>.
          <br/>
          <br/>
          <Button htmlType="button" onClick={() => load(entityId)}>
            <FormattedMessage id="common.retry"/>
          </Button>
        </>
      );
    }

    return (
      <Card className='narrow-layout'>
        <Form onFinish={handleFinish}
              onFinishFailed={handleFinishFailed}
              layout='vertical'
              ref={store.formRef}
              form={form}
              validateMessages={createAntdFormValidationMessages(intl)}
        >

          <% editAttributes.forEach(attr => { %>
            <Field entityName={<%= entity.className %>.NAME}
                   propertyName="<%= attr.name %>"

              <% if (readOnlyFields.includes(attr.name)) { %>
                disabled={true}
              <% } else if (attr.name === locals.stringIdName) { %>
                disabled={!isNewEntity(entityId)}
              <% } %>

              <% if (Object.keys(editCompositions).includes(attr.name)) { %>
                   <% if (typeof nestedEntityInfo !== 'undefined' && typeof nestedEntityInfo[attr.name] !== 'undefined') {%>
                        nestedEntityView='<%= nestedEntityInfo[attr.name] %>'
                   <% } %>
                   parentEntityInstanceId={entityId !== <%= className %>.NEW_SUBPATH ? entityId : undefined}
              <% } %>

              <% if (Object.keys(editAssociations).includes(attr.name)) { %>
                   optionsContainer={store.<%= attr.name %>sDc}
              <% } %>

                   formItemProps={{
                     style: {marginBottom: "12px"},
                   <% if (attr.mandatory) { -%>
                     rules: [{required: true}],
                   <% } -%>
                   <% if (attr.type && attr.type.fqn === 'java.lang.Boolean') { -%>
                     valuePropName: "checked",
                   <% } -%>
                   }}
            /> <%# end Field %>
          <% }) %>

          {store.globalErrors.length > 0 && (
            <Alert
              message={<MultilineText lines={toJS(store.globalErrors)} />}
              type="error"
              style={{ marginBottom: "24px" }}
            />
          )}

          <Form.Item style={{textAlign: 'center'}}>
            <Link to={<%= className %>.PATH}>
              <Button htmlType="button">
                <FormattedMessage id='common.cancel'/>
              </Button>
            </Link>
            <Button type="primary"
                    htmlType="submit"
                    disabled={status !== "DONE" && status !== "ERROR"}
                    loading={status === "LOADING"}
                    style={{marginLeft: '8px'}}>
              <FormattedMessage id='common.submit'/>
            </Button>
          </Form.Item>
        </Form>
      </Card>
    );
  });
};

export default <%= editComponentClass %>;
