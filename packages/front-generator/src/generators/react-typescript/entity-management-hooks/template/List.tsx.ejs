import React, {useEffect, useCallback} from "react";
import { useObserver } from "mobx-react";
import { Link } from "react-router-dom";
import { DeleteOutlined, EditOutlined, PlusOutlined } from '@ant-design/icons';
import { Modal, Button, List, message } from "antd";
import {
  useCollection,
  useMainStore,
  useReaction,
  EntityPermAccessControl
} from "@cuba-platform/react-core";
import {
  EntityProperty,
  Paging,
  setPagination,
  Spinner
} from "@cuba-platform/react-ui";
import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";
import {SerializedEntity, getStringId} from "@cuba-platform/rest";
import {PATH, NEW_SUBPATH} from "./<%= className %>";
import {FormattedMessage, useIntl} from "react-intl";
import { PaginationConfig } from "antd/es/pagination";

type Props = {
  paginationConfig: PaginationConfig;
  onPagingChange: (current: number, pageSize: number) => void;
};

const FIELDS = [
<% listAttributes.forEach(p => { -%>
  '<%= p.name %>',
<% }) %>
];

const <%= listComponentClass %> = (props: Props) => {
  const { paginationConfig, onPagingChange } = props;

  const intl = useIntl();
  const mainStore = useMainStore();

  const dataCollection = useCollection<<%= entity.className %>>(<%= entity.className %>.NAME, {
    view: '<%= listView.name %>',
    <% if (entity.updatable == true) { -%>
      sort: '-updateTs',
    <% } -%>
    loadImmediately: false,
    <% if (locals.stringIdName != null) { %>
      stringIdName: '<%= stringIdName %>'
    <% } %>
  });

  useEffect(() => {
    setPagination(paginationConfig, dataCollection.current, true);
  }, [paginationConfig, dataCollection]);

  useReaction(
    () => dataCollection.current.status,
    status => {
      if (status === "ERROR") {
        message.error(intl.formatMessage({ id: "common.requestFailed" }));
      }
    }
  );

  const showDeletionDialog = useCallback(
    (e: SerializedEntity<<%= entity.className %>>) => {
      Modal.confirm({
        title: intl.formatMessage(
          { id: "management.browser.delete.areYouSure" },
          { instanceName: e._instanceName }
        ),
        okText: intl.formatMessage({
          id: "management.browser.delete.ok"
        }),
        cancelText: intl.formatMessage({ id: "common.cancel" }),
        onOk: () => {
          return dataCollection.current.delete(e);
        }
      });
    }, [intl, dataCollection]
  );

  return useObserver(() => {
    const { status, items, count } = dataCollection.current;

    if (status === "LOADING" || mainStore?.isEntityDataLoaded() !== true) {
      return <Spinner />;
    }

    return (
      <div className='narrow-layout'>
        <EntityPermAccessControl entityName={<%= entity.className %>.NAME} operation='create'>
          <div style={{marginBottom: '12px'}}>
            <Link to={PATH + '/' + NEW_SUBPATH}>
              <Button htmlType='button'
                      type='primary'
                      icon={<PlusOutlined />} >
                <span><FormattedMessage id='common.create'/></span>
              </Button>
            </Link>
          </div>
        </EntityPermAccessControl>

        <List itemLayout="horizontal"
              bordered
              dataSource={items}
              renderItem={item =>
          <List.Item actions={[
            <DeleteOutlined
              key='delete'
              onClick={() => showDeletionDialog(item)}/>,
            <Link to={PATH + '/' + getStringId(item.id!)} key='edit'>
              <EditOutlined />
            </Link>
          ]}>
            <div style={{flexGrow: 1}}>
              {FIELDS.map(p =>
                <EntityProperty entityName={<%= entity.className %>.NAME}
                                propertyName={p}
                                value={item[p]}
                                key={p}/>
              )}
            </div>
          </List.Item>
        }/>

        {!paginationConfig.disabled && (
          <div style={{margin: "12px 0 12px 0", float: "right"}}>
            <Paging
                    paginationConfig={paginationConfig}
                    onPagingChange={onPagingChange}
                    total={count}
            />
          </div>
        )}
      </div>
    );
  });
};

export default <%=listComponentClass%>;
